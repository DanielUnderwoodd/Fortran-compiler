
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\010\000\002\003" +
    "\003\000\002\004\003\000\002\007\003\000\002\007\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\041" +
    "\006\000\002\026\005\000\002\026\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\003\000" +
    "\002\021\003\000\002\027\003\000\002\027\003\000\002" +
    "\032\005\000\002\010\003\000\002\010\003\000\002\014" +
    "\003\000\002\014\005\000\002\031\003\000\002\031\005" +
    "\000\002\012\003\000\002\013\003\000\002\024\012\000" +
    "\002\025\011\000\002\011\012\000\002\023\011\000\002" +
    "\023\013\000\002\023\014\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\015\005\000\002\042\003" +
    "\000\002\043\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\017\005\000\002" +
    "\020\003\000\002\020\003\000\002\034\006\000\002\033" +
    "\006\000\002\022\003\000\002\022\005\000\002\044\003" +
    "\000\002\044\005\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\036\003\000\002\036\007\000\002" +
    "\040\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\024\005\001\002\000\004\002\202\001" +
    "\002\000\004\046\006\001\002\000\004\037\007\001\002" +
    "\000\022\013\022\016\024\021\010\022\032\025\013\026" +
    "\014\027\021\046\012\001\002\000\006\010\173\011\172" +
    "\001\002\000\036\013\ufffd\014\ufffd\016\ufffd\021\ufffd\022" +
    "\ufffd\025\ufffd\026\ufffd\027\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\041\ufffd\042\ufffd\046\ufffd\001\002\000\006\011\147\030" +
    "\146\001\002\000\004\017\uffe7\001\002\000\004\017\uffe6" +
    "\001\002\000\004\017\144\001\002\000\036\013\ufff6\014" +
    "\ufff6\016\ufff6\021\ufff6\022\ufff6\025\ufff6\026\ufff6\027\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\041\ufff6\042\ufff6\046\ufff6\001" +
    "\002\000\036\013\ufffa\014\ufffa\016\ufffa\021\ufffa\022\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\034\ufffa\035\ufffa\036\ufffa\041" +
    "\ufffa\042\ufffa\046\ufffa\001\002\000\036\013\ufff3\014\ufff3" +
    "\016\ufff3\021\ufff3\022\ufff3\025\ufff3\026\ufff3\027\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\041\ufff3\042\ufff3\046\ufff3\001\002" +
    "\000\004\046\131\001\002\000\004\011\114\001\002\000" +
    "\004\041\112\001\002\000\006\015\054\046\053\001\002" +
    "\000\036\013\ufff7\014\ufff7\016\ufff7\021\ufff7\022\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\034\ufff7\035\ufff7\036\ufff7\041\ufff7" +
    "\042\ufff7\046\ufff7\001\002\000\036\013\ufff8\014\ufff8\016" +
    "\ufff8\021\ufff8\022\ufff8\025\ufff8\026\ufff8\027\ufff8\034\ufff8" +
    "\035\ufff8\036\ufff8\041\ufff8\042\ufff8\046\ufff8\001\002\000" +
    "\036\013\ufff4\014\ufff4\016\ufff4\021\ufff4\022\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\034\ufff4\035\ufff4\036\ufff4\041\ufff4\042" +
    "\ufff4\046\ufff4\001\002\000\036\013\ufffb\014\ufffb\016\ufffb" +
    "\021\ufffb\022\ufffb\025\ufffb\026\ufffb\027\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\041\ufffb\042\ufffb\046\ufffb\001\002\000\036" +
    "\013\ufff9\014\ufff9\016\ufff9\021\ufff9\022\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\034\ufff9\035\ufff9\036\ufff9\041\ufff9\042\ufff9" +
    "\046\ufff9\001\002\000\004\010\037\001\002\000\004\041" +
    "\uffff\001\002\000\024\013\022\016\024\021\010\022\032" +
    "\025\013\026\014\027\021\041\ufffe\046\012\001\002\000" +
    "\036\013\ufff5\014\ufff5\016\ufff5\021\ufff5\022\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\034\ufff5\035\ufff5\036\ufff5\041\ufff5\042" +
    "\ufff5\046\ufff5\001\002\000\036\013\ufffc\014\ufffc\016\ufffc" +
    "\021\ufffc\022\ufffc\025\ufffc\026\ufffc\027\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\041\ufffc\042\ufffc\046\ufffc\001\002\000\004" +
    "\004\040\001\002\000\006\046\044\047\045\001\002\000" +
    "\036\013\uffcc\014\uffcc\016\uffcc\021\uffcc\022\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\034\uffcc\035\uffcc\036\uffcc\041\uffcc\042" +
    "\uffcc\046\uffcc\001\002\000\040\004\uffe3\013\uffe1\014\uffe1" +
    "\016\uffe1\021\uffe1\022\uffe1\025\uffe1\026\uffe1\027\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\041\uffe1\042\uffe1\046\uffe1\001\002" +
    "\000\036\013\uffe5\014\uffe5\016\uffe5\021\uffe5\022\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\034\uffe5\035\uffe5\036\uffe5\041\uffe5" +
    "\042\uffe5\046\uffe5\001\002\000\040\004\uffe0\013\uffe0\014" +
    "\uffe0\016\uffe0\021\uffe0\022\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\041\uffe0\042\uffe0\046\uffe0\001" +
    "\002\000\036\013\uffc0\014\uffc0\016\uffc0\021\uffc0\022\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\034\uffc0\035\uffc0\036\uffc0\041" +
    "\uffc0\042\uffc0\046\uffc0\001\002\000\036\013\uffc1\014\uffc1" +
    "\016\uffc1\021\uffc1\022\uffc1\025\uffc1\026\uffc1\027\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\041\uffc1\042\uffc1\046\uffc1\001\002" +
    "\000\004\004\050\001\002\000\004\046\044\001\002\000" +
    "\040\004\uffe2\013\uffe1\014\uffe1\016\uffe1\021\uffe1\022\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\034\uffe1\035\uffe1\036\uffe1\041" +
    "\uffe1\042\uffe1\046\uffe1\001\002\000\036\013\uffe4\014\uffe4" +
    "\016\uffe4\021\uffe4\022\uffe4\025\uffe4\026\uffe4\027\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\041\uffe4\042\uffe4\046\uffe4\001\002" +
    "\000\004\030\104\001\002\000\004\011\055\001\002\000" +
    "\006\045\056\046\061\001\002\000\040\012\uffea\013\uffea" +
    "\016\uffea\021\uffea\022\uffea\025\uffea\026\uffea\027\uffea\031" +
    "\uffea\032\uffea\033\uffea\040\uffea\043\uffea\044\uffea\046\uffea" +
    "\001\002\000\004\012\uffd7\001\002\000\016\031\102\032" +
    "\uffd5\033\uffd5\040\100\043\uffd5\044\uffd5\001\002\000\040" +
    "\012\uffe9\013\uffe9\016\uffe9\021\uffe9\022\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\031\uffe9\032\uffe9\033\uffe9\040\uffe9\043\uffe9" +
    "\044\uffe9\046\uffe9\001\002\000\004\012\uffd9\001\002\000" +
    "\004\012\uffd8\001\002\000\004\012\075\001\002\000\012" +
    "\032\071\033\067\043\070\044\066\001\002\000\006\045" +
    "\uffd2\046\uffd2\001\002\000\006\045\uffd1\046\uffd1\001\002" +
    "\000\006\045\uffd3\046\uffd3\001\002\000\006\045\uffd0\046" +
    "\uffd0\001\002\000\006\045\056\046\061\001\002\000\004" +
    "\012\uffd6\001\002\000\004\012\uffd4\001\002\000\022\013" +
    "\022\016\024\021\010\022\032\025\013\026\014\027\021" +
    "\046\012\001\002\000\024\013\022\016\024\021\010\022" +
    "\032\025\013\026\014\027\021\034\077\046\012\001\002" +
    "\000\036\013\uffde\014\uffde\016\uffde\021\uffde\022\uffde\025" +
    "\uffde\026\uffde\027\uffde\034\uffde\035\uffde\036\uffde\041\uffde" +
    "\042\uffde\046\uffde\001\002\000\006\045\uffce\046\uffce\001" +
    "\002\000\006\045\056\046\061\001\002\000\006\045\uffcd" +
    "\046\uffcd\001\002\000\004\012\uffcf\001\002\000\004\045" +
    "\105\001\002\000\004\004\106\001\002\000\006\045\056" +
    "\046\061\001\002\000\022\013\022\016\024\021\010\022" +
    "\032\025\013\026\014\027\021\046\012\001\002\000\024" +
    "\013\022\016\024\021\010\022\032\025\013\026\014\027" +
    "\021\034\111\046\012\001\002\000\036\013\uffdf\014\uffdf" +
    "\016\uffdf\021\uffdf\022\uffdf\025\uffdf\026\uffdf\027\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\041\uffdf\042\uffdf\046\uffdf\001\002" +
    "\000\004\046\113\001\002\000\004\002\000\001\002\000" +
    "\006\045\056\046\061\001\002\000\004\012\116\001\002" +
    "\000\004\023\117\001\002\000\022\013\022\016\024\021" +
    "\010\022\032\025\013\026\014\027\021\046\012\001\002" +
    "\000\030\013\022\014\121\016\024\021\010\022\032\025" +
    "\013\026\014\027\021\035\122\036\123\046\012\001\002" +
    "\000\022\013\022\016\024\021\010\022\032\025\013\026" +
    "\014\027\021\046\012\001\002\000\036\013\uffdc\014\uffdc" +
    "\016\uffdc\021\uffdc\022\uffdc\025\uffdc\026\uffdc\027\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\041\uffdc\042\uffdc\046\uffdc\001\002" +
    "\000\022\013\022\016\024\021\010\022\032\025\013\026" +
    "\014\027\021\046\012\001\002\000\024\013\022\014\125" +
    "\016\024\021\010\022\032\025\013\026\014\027\021\046" +
    "\012\001\002\000\004\035\126\001\002\000\036\013\uffda" +
    "\014\uffda\016\uffda\021\uffda\022\uffda\025\uffda\026\uffda\027" +
    "\uffda\034\uffda\035\uffda\036\uffda\041\uffda\042\uffda\046\uffda" +
    "\001\002\000\024\013\022\016\024\021\010\022\032\025" +
    "\013\026\014\027\021\035\130\046\012\001\002\000\036" +
    "\013\uffdb\014\uffdb\016\uffdb\021\uffdb\022\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\034\uffdb\035\uffdb\036\uffdb\041\uffdb\042\uffdb" +
    "\046\uffdb\001\002\000\040\011\uffeb\013\uffeb\014\uffeb\016" +
    "\uffeb\021\uffeb\022\uffeb\025\uffeb\026\uffeb\027\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\041\uffeb\042\uffeb\046\uffeb\001\002\000" +
    "\004\011\133\001\002\000\004\046\135\001\002\000\006" +
    "\004\137\012\136\001\002\000\042\004\uffca\012\uffca\013" +
    "\uffca\014\uffca\016\uffca\021\uffca\022\uffca\025\uffca\026\uffca" +
    "\027\uffca\034\uffca\035\uffca\036\uffca\041\uffca\042\uffca\046" +
    "\uffca\001\002\000\022\013\022\016\024\021\010\022\032" +
    "\025\013\026\014\027\021\046\012\001\002\000\004\046" +
    "\140\001\002\000\042\004\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\016\uffc9\021\uffc9\022\uffc9\025\uffc9\026\uffc9\027\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\041\uffc9\042\uffc9\046\uffc9\001\002" +
    "\000\024\013\022\016\024\021\010\022\032\025\013\026" +
    "\014\027\021\042\142\046\012\001\002\000\004\046\131" +
    "\001\002\000\036\013\uffdd\014\uffdd\016\uffdd\021\uffdd\022" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\041\uffdd\042\uffdd\046\uffdd\001\002\000\004\046\044\001" +
    "\002\000\036\013\uffe8\014\uffe8\016\uffe8\021\uffe8\022\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\034\uffe8\035\uffe8\036\uffe8\041" +
    "\uffe8\042\uffe8\046\uffe8\001\002\000\006\045\160\047\162" +
    "\001\002\000\010\045\150\046\153\047\152\001\002\000" +
    "\006\004\uffc5\012\uffc5\001\002\000\006\004\156\012\155" +
    "\001\002\000\006\004\uffc4\012\uffc4\001\002\000\006\004" +
    "\uffc6\012\uffc6\001\002\000\006\004\uffc8\012\uffc8\001\002" +
    "\000\036\013\ufff2\014\ufff2\016\ufff2\021\ufff2\022\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\034\ufff2\035\ufff2\036\ufff2\041\ufff2" +
    "\042\ufff2\046\ufff2\001\002\000\010\045\150\046\153\047" +
    "\152\001\002\000\006\004\uffc7\012\uffc7\001\002\000\044" +
    "\005\163\006\164\010\165\013\uffec\014\uffec\016\uffec\021" +
    "\uffec\022\uffec\025\uffec\026\uffec\027\uffec\034\uffec\035\uffec" +
    "\036\uffec\041\uffec\042\uffec\046\uffec\001\002\000\036\013" +
    "\ufff1\014\ufff1\016\ufff1\021\ufff1\022\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\034\ufff1\035\ufff1\036\ufff1\041\ufff1\042\ufff1\046" +
    "\ufff1\001\002\000\036\013\ufff0\014\ufff0\016\ufff0\021\ufff0" +
    "\022\ufff0\025\ufff0\026\ufff0\027\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\041\ufff0\042\ufff0\046\ufff0\001\002\000\004\045\160" +
    "\001\002\000\004\045\160\001\002\000\004\045\160\001" +
    "\002\000\036\013\uffed\014\uffed\016\uffed\021\uffed\022\uffed" +
    "\025\uffed\026\uffed\027\uffed\034\uffed\035\uffed\036\uffed\041" +
    "\uffed\042\uffed\046\uffed\001\002\000\036\013\uffee\014\uffee" +
    "\016\uffee\021\uffee\022\uffee\025\uffee\026\uffee\027\uffee\034" +
    "\uffee\035\uffee\036\uffee\041\uffee\042\uffee\046\uffee\001\002" +
    "\000\036\013\uffef\014\uffef\016\uffef\021\uffef\022\uffef\025" +
    "\uffef\026\uffef\027\uffef\034\uffef\035\uffef\036\uffef\041\uffef" +
    "\042\uffef\046\uffef\001\002\000\004\004\200\001\002\000" +
    "\006\010\173\011\172\001\002\000\004\004\uffc3\001\002" +
    "\000\004\004\175\001\002\000\004\010\176\001\002\000" +
    "\004\012\177\001\002\000\004\004\uffc2\001\002\000\004" +
    "\046\135\001\002\000\040\004\137\013\uffcb\014\uffcb\016" +
    "\uffcb\021\uffcb\022\uffcb\025\uffcb\026\uffcb\027\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\041\uffcb\042\uffcb\046\uffcb\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\022\004\032" +
    "\006\010\007\033\010\014\011\016\023\025\024\024\025" +
    "\015\026\030\032\027\033\026\034\034\041\017\001\001" +
    "\000\004\036\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\035\010\014\011" +
    "\016\023\025\024\024\025\015\026\030\032\027\033\026" +
    "\034\034\041\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\042\013\041\014\045" +
    "\031\046\040\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\051\013" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\062\017\056\027" +
    "\057\030\063\035\061\042\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\073" +
    "\043\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\006\010\007\075\010\014\011\016\023\025\024\024" +
    "\025\015\026\030\032\027\033\026\034\034\041\017\001" +
    "\001\000\030\006\035\010\014\011\016\023\025\024\024" +
    "\025\015\026\030\032\027\033\026\034\034\041\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\106\001\001\000\032" +
    "\006\010\007\107\010\014\011\016\023\025\024\024\025" +
    "\015\026\030\032\027\033\026\034\034\041\017\001\001" +
    "\000\030\006\035\010\014\011\016\023\025\024\024\025" +
    "\015\026\030\032\027\033\026\034\034\041\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\015\062\017\056\027\057\030\114\035\061\042\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\010\007\117\010\014\011\016\023\025\024\024\025\015" +
    "\026\030\032\027\033\026\034\034\041\017\001\001\000" +
    "\030\006\035\010\014\011\016\023\025\024\024\025\015" +
    "\026\030\032\027\033\026\034\034\041\017\001\001\000" +
    "\032\006\010\007\126\010\014\011\016\023\025\024\024" +
    "\025\015\026\030\032\027\033\026\034\034\041\017\001" +
    "\001\000\002\001\001\000\032\006\010\007\123\010\014" +
    "\011\016\023\025\024\024\025\015\026\030\032\027\033" +
    "\026\034\034\041\017\001\001\000\030\006\035\010\014" +
    "\011\016\023\025\024\024\025\015\026\030\032\027\033" +
    "\026\034\034\041\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\035\010\014\011\016\023\025\024" +
    "\024\025\015\026\030\032\027\033\026\034\034\041\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\010\007\140\010\014\011\016\023" +
    "\025\024\024\025\015\026\030\032\027\033\026\034\034" +
    "\041\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\006\035\010\014\011\016\023\025\024\024\025\015" +
    "\026\030\032\027\033\026\034\034\041\017\001\001\000" +
    "\004\021\142\001\001\000\002\001\001\000\012\012\042" +
    "\013\041\014\144\031\046\001\001\000\002\001\001\000" +
    "\004\037\160\001\001\000\006\044\150\045\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\167\001\001" +
    "\000\004\037\166\001\001\000\004\037\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\200\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG2

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  }
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG3
 return lexer.next_token(); 
    }

//@@CUPDBG1

  protected Lexer lexer;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

//@@CUPDBG0


    ArrayList<Function> table = new ArrayList<Function>();
 	ArrayList<Type> 	table1 =new ArrayList<Type>();
    ArrayList<Type_map> 	type_map =new ArrayList<Type_map>();
    ArrayList<Type_map_define> 	type_map_define =new ArrayList<Type_map_define>();



	public void check1(String name,int type1){
  	

   int i;
   int counter =0;
   
   
       for (i =0;i<table1.size();i++){
        if(table1.get(i).variable_name.equals(name)){
          counter++;
          if( table1.get(i).value_type.equals("int")){
           System.out.println("variable assigment is correct and " + name + " and " +  type1);
			}else {
         System.out.println("variable assigment is incorrect and " + name + " and " +  table1.get(i).value_type);
				}
 
		}

	}

}
	public void check2(String name,String type1){



  
   int i;
   int counter =0;
       for (i =0;i<table1.size();i++){
        if(table1.get(i).variable_name.equals(name)){
          counter++;
          if( table1.get(i).value_type.equals("String")){
           System.out.println("variable assigment is correct and " + name + " and " +  type1);
			}else {
         System.out.println("variable assigment is incorrect and " + name + " and " +  table1.get(i).value_type);
				}
 
		}

	}

}

	public   void check(String name,String arg){
    int i;
   int  k = 0;
    int counter =0;
    int count =0;
    int counter_sub = 0;
    int j = 0;

    	for (i =0;i<table.size();i++){
        if(table.get(i).FunctionName.equals(name)){
             count =i ;
             counter = counter + 1;
           } 
 
		}
   
  
	  if(counter == 1){

       System.out.println("found the function");

    	for (j=0;j<arg.length();j++){
        
    	if(arg.charAt(j)==','){
          
      	counter_sub++;
     }
  
     }

     if(counter_sub + 1 == table.get(count).NumArg) {

       System.out.println("Arg of function is correct");
        for (k =0 ; k<type_map_define.size();k++){
           type_map_define.get(k).value_type = type_map.get(k).value_type;

		}
          		for( j=0;j<type_map_define.size();j++){
   					for(i=0;i<table1.size();i++) {
                          if(type_map_define.get(j).variable_name.equals(table1.get(i).variable_name) ){
                                
                                  if(type_map_define.get(j).value_type.equals( table1.get(i).value_type) ) {
                                        System.out.println(" variable  " + type_map_define.get(j).variable_name + " definition is correct and function name is " + type_map_define.get(j).FunctionName);
                                      }else {
                                            System.out.println( " variable " + type_map_define.get(j).variable_name + " type is incorrect and must be " + type_map_define.get(j).value_type);
                                          }
							}else {
                                     if(table1.size() == i + 1 ) {

                                           System.out.println( " variable " + type_map_define.get(j).variable_name + " it is not define in function  " + type_map_define.get(j).FunctionName);
										}

                                      

                                  }

					}
     	}
               
      }else {
    	System.out.println("Arg of function is incorrect");
        }


	}else
       {
        
       System.out.println("function is not define or more than 1 function defined");
     }


   }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begin ::= PROGRAM IDENT IMPLI decision ENDPROGRAM IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decision ::= main_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_statements ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= statement 
            {
              java.lang.String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4
 RESULT = e1 ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= statements statement 
            {
              java.lang.String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5
RESULT= e1 + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= field_dec 
            {
              java.lang.String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= function 
            {
              java.lang.String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= assignment 
            {
              java.lang.String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= if_dec 
            {
              java.lang.String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= do_statement 
            {
              java.lang.String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= while_statement 
            {
              java.lang.String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= print_statement 
            {
              java.lang.String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= read_statement 
            {
              java.lang.String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= function_call 
            {
              java.lang.String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function_call ::= IDENT LPAREN arg_function_call RPAREN 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG7
   
int j =0;
int i =0;
 int pointer =0;
 String Local ;
 System.out.println(e2.length());
 int counter = 0;
for (i=0;i<e2.length();i++){
   if(e2.charAt(i) ==','){
    counter++;
	}

}

  if(counter > 0)  {
     for (i=0;i<e2.length();i++){
      if(e2.charAt(i) ==',' || e2.length() - 1 == i ){
       Local = e2.substring(pointer,i);
       if(e2.length() - 1 == i) {
       Local = e2.substring(pointer,i+1);
        
			}
       
       for(j=0;j<table1.size();j++)  {
           
         
        
        if( Local.equals(table1.get(j).variable_name) ) {
         Type_map type = new Type_map(table1.get(j).value_type,Local,e1) ;
         type_map.add(type);
          
		}
		}
       pointer = i+1;
    }
    
	}

	}else {
      for(j=0;j<table1.size();j++){

          if( e2 == table1.get(j).variable_name ){


            Type_map type = new Type_map(table1.get(j).value_type,e2,e1) ;
            type_map.add(type);

		}

		}

      
    
  
	}
 
    
  











 check(e1,e2);


	
	


 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // assignment ::= IDENT EQ calculation 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
 RESULT = e1 + "=" + e2 ; 
      check1(e1,e2);

  

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // assignment ::= IDENT EQ STRING_LIT 
            {
              Object RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9
RESULT = m + "=" + n ;
        check2(m,n);


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // calculation ::= INTEGER_LIT PLUS calculation 
            {
              Integer RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("calculation",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // calculation ::= INTEGER_LIT MINUS calculation 
            {
              Integer RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("calculation",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // calculation ::= INTEGER_LIT TIMES calculation 
            {
              Integer RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("calculation",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // calculation ::= INTEGER_LIT 
            {
              Integer RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("calculation",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // character ::= IDENT 
            {
              java.lang.String RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11
 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literal ::= INTEGER_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // literal ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // field_dec ::= type TPOINT variable_declarators 
            {
              java.lang.String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG12


 int i =0;
 int pointer =0;
 String Local ;
 int counter = 0;
for (i=0;i<e2.length();i++){
   if(e2.charAt(i) ==','){
    counter++;
	}

}

  if(counter > 0)  {
     for (i=0;i<e2.length();i++){
      if(e2.charAt(i) ==',' || e2.length() - 1 == i ){
       Local = e2.substring(pointer,i);
       if(e2.length() - 1 == i) {
       Local = e2.substring(pointer,i+1);
			}
        
       Type type = new Type(e1,Local) ;
       table1.add(type);
       pointer = i+1;
    }
    
	}

	}else {
      
     Type type = new Type(e1,e2) ;
     table1.add(type);
  
	}
 
    
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_dec",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= INT 
            {
              java.lang.String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13
 RESULT = "int" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= CHARACTER 
            {
              java.lang.String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14
 RESULT = "String"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variable_declarators ::= variable_declarator 
            {
              java.lang.String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15
RESULT = n ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarators",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable_declarators ::= lefth CO variable_declarator 
            {
              java.lang.String RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		java.lang.String m = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG16
 RESULT = m + "," + n ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarators",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lefth ::= variable_declarator_name 
            {
              java.lang.String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17
 RESULT=n ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lefth",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lefth ::= lefth CO variable_declarator_name 
            {
              java.lang.String RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		java.lang.String m = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18
 RESULT =  m + "," + n ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lefth",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variable_declarator ::= variable_declarator_name 
            {
              java.lang.String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG19
RESULT = n ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variable_declarator_name ::= IDENT 
            {
              java.lang.String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG20
RESULT=n ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarator_name",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // do_statement ::= DO IDENT EQ INTEGER_LIT CO literal statements ENDDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // while_statement ::= DO WHILE LPAREN expression RPAREN statements ENDDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function ::= FUNCTION character LPAREN arg RPAREN statements ENDFUNCTION character 
            {
              Object RESULT =null;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		java.lang.String e3 = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG21
     
int j =0;
int i =0;
 int pointer =0;
 String Local ;
 int counter = 0;
for (i=0;i<e1.length();i++){
   if(e1.charAt(i) ==','){
    counter++;
	}

}

  if(counter > 0)  {
     for (i=0;i<e1.length();i++){
      if(e1.charAt(i) ==',' || e1.length() - 1 == i ){
       Local = e1.substring(pointer,i);
       if(e1.length() - 1 == i) {
       Local = e1.substring(pointer,i+1);
			}
         {

         Type_map_define type = new Type_map_define(Local,e2,null) ;
         type_map_define.add(type);
		}
		
       pointer = i+1;
    }
    
	}

	}else {

            Type_map_define type = new Type_map_define(e1,e2,null) ;
            type_map_define.add(type);

		}

 




Function obj = new Function(0,e2,e1) ;
   table.add(obj);

  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if_dec ::= IF LPAREN expression RPAREN THEN statements ENDIF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_dec",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if_dec ::= IF LPAREN expression RPAREN THEN statements ELSE statements ENDIF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_dec",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if_dec ::= IF LPAREN expression RPAREN THEN statements ELSEIF statements ELSE ENDIF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_dec",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= relational_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= comparative_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= equality_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparative_expression ::= left_side comparative_operator right_side 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparative_expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // left_side ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("left_side",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // right_side ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("right_side",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparative_operator ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparative_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparative_operator ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparative_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comparative_operator ::= GTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparative_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comparative_operator ::= LTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparative_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // equality_expression ::= literal equality_operator literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // equality_operator ::= EQ2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // equality_operator ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // print_statement ::= PRINT TIMES CO assign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // read_statement ::= READ arg2 CO arg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arg ::= IDENT 
            {
              java.lang.String RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22
 RESULT=i ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arg ::= arg CO IDENT 
            {
              java.lang.String RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		java.lang.String a = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23
 RESULT = a + "," + i ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arg_function_call ::= sub_arg 
            {
              java.lang.String RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		java.lang.String a = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24
 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_function_call",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arg_function_call ::= arg_function_call CO sub_arg 
            {
              java.lang.String RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		java.lang.String a = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25
 RESULT = i + "," + a ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_function_call",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sub_arg ::= IDENT 
            {
              java.lang.String RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26
 RESULT=i ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_arg",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sub_arg ::= INTEGER_LIT 
            {
              java.lang.String RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
 RESULT=i.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_arg",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sub_arg ::= STRING_LIT 
            {
              java.lang.String RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
 RESULT=i ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_arg",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arg2 ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arg2 ::= LPAREN arg2 CO TIMES RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assign ::= variable_declarators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // assign ::= STRING_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
